// ToH Fangame — 최종 보안 규칙 (v4)
// writeBatch와의 충돌을 완벽히 해결하기 위해 규칙을 최종적으로 정리한 버전입니다.
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== 공통 헬퍼 함수 =====
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(data) {
      return isSignedIn() && data.owner_uid == request.auth.uid;
    }
    function charOwner(charPath) {
      return get(/databases/$(database)/documents/$(charPath)).data.owner_uid;
    }

    // ===== 캐릭터 (chars) =====
    match /chars/{charId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.owner_uid == request.auth.uid;
      allow update: if isOwner(resource.data);
      allow delete: if isOwner(resource.data);

      match /images/{imageDoc} {
        allow read: if true;
        allow create, update, delete: if isSignedIn()
          && get(/databases/$(database)/documents/chars/$(charId)).data.owner_uid == request.auth.uid;
      }
    }
    
    // ===== 캐릭터 인벤토리 (char_items) =====
    match /char_items/{itemId} {
        allow read: if true;
        allow create: if isSignedIn()
            && request.resource.data.char_id.matches('^chars/[^/]+$')
            && charOwner(request.resource.data.char_id) == request.auth.uid;
        allow update, delete: if isSignedIn()
            && resource.data.char_id.matches('^chars/[^/]+$')
            && charOwner(resource.data.char_id) == request.auth.uid;
    }
    
    // ===== [수정] 탐험 (explore_runs) =====
    match /explore_runs/{runId} {
      // 모든 탐험 기록은 누구나 읽을 수 있습니다.
      allow read: if true;
      // 탐험 생성: 로그인한 유저가 자신의 캐릭터로만 탐험을 시작할 수 있습니다.
      allow create: if isOwner(request.resource.data.owner_uid) &&
                      isOwner(getCharOwner(request.resource.data.charRef.split('/')[1]));
      // 탐험 업데이트: 오직 주인만 수정할 수 있으며, 주인 ID나 캐릭터 ID는 변경할 수 없습니다.
      allow update: if isOwner(get(/databases/$(database)/documents/explore_runs/$(runId)).data.owner_uid) &&
                      !('owner_uid' in request.resource.data) &&
                      !('charRef' in request.resource.data);
      // 탐험 기록은 삭제할 수 없습니다.
      allow delete: if false;
    }

    // --- 배틀 로그(battle_logs) ---
    match /battle_logs/{logId} {
      allow read: if true;
      // create: 요청 데이터를 확인
      allow create: if isSignedIn() && request.resource.data.attacker_uid == request.auth.uid;
      // update, delete는 비활성화
      allow update, delete: if false;
    }



    // ===== [수정] 유저 정보 (users) - 공유 인벤토리용 =====
    // 모든 유저 정보는 로그인한 모든 유저가 읽을 수 있게 허용합니다. (프로필 확인 등)
    // 하지만 문서를 생성하거나 수정하는 것은 오직 자기 자신만 가능합니다.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isOwner(userId);
    }

    // (이하 다른 규칙들은 이전과 동일합니다)
    // ===== 친구 요청 (friendRequests), 친구 관계 (friendships), 매칭 등 =====
    match /friendRequests/{reqId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.from;
      allow update: if isSignedIn() && request.auth.uid == resource.data.to;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }
    match /friendships/{pairId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.a || request.auth.uid == resource.data.b);
      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.a || request.auth.uid == request.resource.data.b);
    }
    match /matchSessions/{sid} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.a_owner || request.auth.uid == resource.data.b_owner);
      allow write: if false;
    }
    match /matchRequests/{rid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
        && request.resource.data.owner_uid == request.auth.uid
        && request.resource.data.status == "open"
        && request.resource.data.lockedBy == null
        && request.resource.data.char_ref.matches('^chars/[^/]+$');
      allow update: if isSignedIn()
        && (
          ( resource.data.owner_uid == request.auth.uid
            && (request.resource.data.status in ["open","paired","cancelled"])
            && request.resource.data.lockedBy == resource.data.lockedBy
          ) || ( 
            resource.data.owner_uid != request.auth.uid
            && resource.data.lockedBy == null
            && request.resource.data.lockedBy != null
            && request.resource.data.status == resource.data.status
          )
        );
      allow delete: if isSignedIn()
        && (
          resource.data.owner_uid == request.auth.uid
          || (('expireAt' in resource.data) && resource.data.expireAt < request.time)
        );
    }
    match /rankings/{docId} {
      allow read: if true;
      allow write: if false;
    }
    match /configs/{docId}/{subpath=**} {
      allow read: if true;
      allow write: if false;
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
