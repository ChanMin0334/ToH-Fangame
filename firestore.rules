rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== 헬퍼 함수 =====
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(docData) {
      return isSignedIn() && docData.owner_uid == request.auth.uid;
    }
    // [최종 수정] increment() 업데이트를 정확히 감지하는 규칙
    function isLiking() {
      // 오직 이 3개 필드만 바뀌어야 함
      let d = request.resource.data.diff(resource.data);
      return d.changedKeys().hasOnly(['likes_total', 'likes_weekly', 'updatedAt'])
        // 결과값이 정확히 +1 되었는지 확인
        && request.resource.data.likes_total  == resource.data.likes_total  + 1
        && request.resource.data.likes_weekly == resource.data.likes_weekly + 1;
        // updatedAt은 서버시간으로 바뀌는 것만 요구하면 충분 (값 비교는 생략)
    }

    // ===== 컬렉션 규칙 =====
    match /chars/{charId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data);
      // [최종 수정] 소유자이거나, '좋아요'를 누르는 경우 업데이트를 허용합니다.
      allow update: if isOwner(resource.data) || (isSignedIn() && isLiking());
      allow delete: if isOwner(resource.data);
      
      match /images/{imageDoc} {
        allow read: if true;
        allow write: if isOwner(get(/databases/$(database)/documents/chars/$(charId)).data);
      }
    }
    


    
    // ===== 관계 (relations) — DEV_SUPER_LOOSE =====
    match /relations/{relationId} {
        allow read: if true;

        // 생성/수정/삭제: 로그인만 되면 전부 허용 (개발용)
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();

        // 하위 문서: /relations/{relationId}/meta/note
        match /meta/note {
            allow read: if true;
            // 메모 작성/수정/삭제도 전부 허용 (로그인만)
            allow create: if isSignedIn();
            allow update: if isSignedIn();
            allow delete: if isSignedIn();
        }
    }

    
    

    // (이하 다른 규칙은 기존과 동일하게 유지)
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if request.auth.uid == userId;
      allow create, update: if request.auth.uid == userId;
    }
    match /explore_runs/{runId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data);
      allow update: if isOwner(resource.data);
      allow delete: if false;
    }
    match /battle_logs/{logId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.attacker_uid == request.auth.uid;
      allow update, delete: if false;
    }
    match /friendRequests/{reqId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.from;
      allow update: if isSignedIn() && request.auth.uid == resource.data.to;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }
    match /friendships/{pairId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.a || request.auth.uid == resource.data.b);
      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.a || request.auth.uid == request.resource.data.b);
    }
    match /matchSessions/{sid} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.a_owner || request.auth.uid == resource.data.b_owner);
      allow write: if false;
    }
    match /configs/{docId}/{subpath=**} {
      allow read: if true;
      allow write: if false;
    }
    match /rankings/{docId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
