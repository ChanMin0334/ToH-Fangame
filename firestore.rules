// ToH Fangame — Firestore Rules (merged: 소유자 가드 + 친구/랭킹/설정 + 관계/에피소드 + char_items 참조 검증)
// 2025-09-06

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

  // 탐험 런 문서: 소유자만 생성/읽기/갱신
  match /explore_runs/{runId} {
    allow create: if request.auth != null
      && request.resource.data.owner_uid == request.auth.uid
      && request.resource.data.charRef.matches('^chars/[^/]+$')
      && request.resource.data.status == 'ongoing';

    // 읽기는 소유자만 — 전적 공개하려면 이 부분을 넓혀도 됨
    allow read: if request.auth != null
      && resource.data.owner_uid == request.auth.uid;

    // 진행 저장(턴/체력/이벤트 추가 등)도 소유자만
    allow update: if request.auth != null
      && resource.data.owner_uid == request.auth.uid;

    allow delete: if false;
  }


    // ─────────────────────────────
    // 공통 헬퍼
    // ─────────────────────────────
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(data) {
      return isSignedIn() && data.owner_uid == request.auth.uid;
    }

    // ─────────────────────────────
    // users (프로필)
    // - 읽기: 로그인한 사용자만(친구 검색용)
    // - 닉네임: 20자 제한, 바뀔 때만 7일 쿨타임 (lastNicknameChangeAt: Timestamp 권장)
    // ─────────────────────────────
    match /users/{uid} {
      allow read: if isSignedIn();

      allow create: if isSignedIn()
        && request.auth.uid == uid;

      allow update: if isSignedIn()
        && request.auth.uid == uid
        // 닉네임 길이 제한
        && (
          !('nickname' in request.resource.data)
          || request.resource.data.nickname is string
          && request.resource.data.nickname.size() <= 20
        )
        // 닉네임 변경 쿨타임 (값이 실제로 바뀔 때만)
        && (
          !('nickname' in request.resource.data)                                  // 닉 변경 없으면 통과
          || !('nickname' in resource.data)                                       // 기존 닉 없으면 통과
          || request.resource.data.nickname == resource.data.nickname             // 값 동일이면 통과
          || !('lastNicknameChangeAt' in resource.data)                           // 기록 없으면 통과
          || (
               resource.data.lastNicknameChangeAt is timestamp
               && (request.time - resource.data.lastNicknameChangeAt)
                  > duration.value(7, 'd')                                        // 7일
             )
        );
    }





    // ─────────────────────────────
    // chars (캐릭터)
    // - 열람: 모두
    // - 생성: owner_uid == 본인
    // - 수정/삭제: 기존 문서의 소유자만 (owner_uid 하이재킹 방지)
    // ─────────────────────────────
    match /chars/{charId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.owner_uid == request.auth.uid;

      allow update, delete: if isSignedIn()
        && resource.data.owner_uid == request.auth.uid;

      allow update: if request.auth != null
        && resource.data.owner_uid == request.auth.uid;
    }

    // ─────────────────────────────
    // char_items (캐릭터 인벤토리)
    // - 문서에 char_id가 있고, 해당 char의 소유자만 쓰기 가능
    // ─────────────────────────────
    match /char_items/{itemId} {
      allow read: if true;

      allow create: if isSignedIn()
        && ('char_id' in request.resource.data)
        && get(/databases/$(database)/documents/chars/$(request.resource.data.char_id)).data.owner_uid
           == request.auth.uid;

      allow update, delete: if isSignedIn()
        && ('char_id' in resource.data)
        && get(/databases/$(database)/documents/chars/$(resource.data.char_id)).data.owner_uid
           == request.auth.uid;
    }

    // ─────────────────────────────
    // Relations
    // ─────────────────────────────
    match /relations/{relId} {
      allow read: if true;

      function isCharPath(p){ return p.matches('^chars/[^/]+$'); }
      function charOwner(p){ return get(/databases/$(database)/documents/$(p)).data.owner_uid; }

        allow create: if isSignedIn()
          && isCharPath(request.resource.data.a_charRef)
          && isCharPath(request.resource.data.b_charRef)
          && request.resource.data.createdBy == request.auth.uid
          && charOwner(request.resource.data.a_charRef) == request.auth.uid
          // 배틀 로그를 통해 생성하는 경우(선택 필드): 10분 이내만 허용
          && (
            !('via_battle_log' in request.resource.data)
            || (
              request.resource.data.via_battle_log.matches('^battle_logs/[^/]+$')
              && request.time < get(/databases/$(database)/documents/$(request.resource.data.via_battle_log)).data.relation_deadline
            )
          );


      // 양측 삭제 가능
      allow delete: if isSignedIn()
        && (charOwner(resource.data.a_charRef) == request.auth.uid
         || charOwner(resource.data.b_charRef) == request.auth.uid);

      allow update: if false; // 업데이트는 메모 등 별도 서브문서에서
    }

    // ─────────────────────────────
    // Battle Logs
    // ─────────────────────────────
    match /battle_logs/{logId} {
      allow read: if true;

      // 생성은 공격자(생성자)만
      allow create: if isSignedIn()
       && request.resource.data.attacker_char.matches('^chars/[^/]+$')
        && request.resource.data.defender_char.matches('^chars/[^/]+$')
        && request.resource.data.createdBy == request.auth.uid;

      // 업데이트는 금지(관계 마킹 등은 별도 필드/함수로 처리 시 허용 가능)
      allow update, delete: if false;

      // 서브: actions/relation 마킹 (선택용)
      match /actions/{actId} {
        allow create: if isSignedIn()
          && get(/databases/$(database)/documents/battle_logs/$(logId)).data.createdBy == request.auth.uid
          && request.time < get(/databases/$(database)/documents/battle_logs/$(logId)).data.relation_deadline;
        allow read: if true;
        allow update, delete: if false;
      }
    }


    // ─────────────────────────────
    // Relation Daily Episodes  (하루 1개: docId=YYYY-MM-DD)
    // ─────────────────────────────
    match /relation_daily/{relId}/episodes/{date} {
      allow read: if true;
    
      function canWrite(){
        return isSignedIn()
          && request.resource.data.owner_uid == request.auth.uid;
      }
  
      allow create: if canWrite();  // 같은 날짜로 재생성은 Firestore가 create 막아줌
      allow update, delete: if canWrite();
    }


    // ─────────────────────────────
    // friendRequests (친구 요청)
    // - 읽기: 본인과 관련된 요청(from/to)만
    // - 생성: 본인이 from
    // - 업데이트(수락/거절 등): to만
    // - 삭제: 양쪽 모두 가능
    // - 자기 자신에게는 생성 금지
    // ─────────────────────────────
    match /friendRequests/{reqId} {
      allow read: if isSignedIn()
        && (
          request.auth.uid == resource.data.from
          || request.auth.uid == resource.data.to
        );

      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.from
        && request.resource.data.from != request.resource.data.to;

      allow update: if isSignedIn()
        && request.auth.uid == resource.data.to;

      allow delete: if isSignedIn()
        && (
          request.auth.uid == resource.data.from
          || request.auth.uid == resource.data.to
        );
    }

    // ─────────────────────────────
    // friendships (친구 쌍)
    // - 읽기/삭제: 두 당사자만
    // - 생성: 두 당사자 중 한쪽이면 가능(요청 수락 시)
    // ─────────────────────────────
    match /friendships/{pairId} {
      allow read, delete: if isSignedIn()
        && (
          request.auth.uid == resource.data.a
          || request.auth.uid == resource.data.b
        );

      allow create: if isSignedIn()
        && (
          request.auth.uid == request.resource.data.a
          || request.auth.uid == request.resource.data.b
        );
    }

    // ─────────────────────────────
    // rankings / configs
    // - rankings: 읽기 전용 (서버 파이프라인이 쓰기)
    // - configs: 프론트 읽기 전용
    // ─────────────────────────────
    match /rankings/{docId} {
      allow read: if true;
      allow write: if false;
    }
    match /configs/{docId} {
      allow read: if true;
      allow write: if false;
    }

    // ─────────────────────────────
    // Exploration Runs
    // ─────────────────────────────
    match /explore_runs/{runId} {
      // 내 기록만 읽기
      allow read: if isSignedIn() && resource.data.owner_uid == request.auth.uid;

      // 생성: 내 캐릭으로 시작만 허용
      allow create: if isSignedIn()
        && request.resource.data.owner_uid == request.auth.uid
        && isCharPath(request.resource.data.charRef)
        && charOwner(request.resource.data.charRef) == request.auth.uid
        && request.resource.data.status == 'ongoing'
        && request.resource.data.startedAt is timestamp;

      // 진행/완료 업데이트: 소유자만
      allow update: if isSignedIn()
        && resource.data.owner_uid == request.auth.uid
        && (
          // 상태 필드는 ongoing → completed 정도만 허용
          (!('status' in request.resource.data))
          || (request.resource.data.status in ['ongoing','completed'])
        )
        // owner_uid/charRef 위조 방지
        && (!('owner_uid' in request.resource.data) || request.resource.data.owner_uid == resource.data.owner_uid)
        && (!('charRef'   in request.resource.data) || request.resource.data.charRef   == resource.data.charRef);

      // 삭제 금지(보존)
      allow delete: if false;
    }
   
    // ─────────────────────────────
    // 기본 차단
    // ─────────────────────────────
    match /{document=**} {
      allow read, write: if false;
    }


    // 탐험 런 문서
    match /explore_runs/{runId} {
      // 생성: 본인 소유만, 필수 필드 간단 가드
      allow create: if request.auth != null
                    && request.resource.data.owner_uid == request.auth.uid
                    && request.resource.data.charRef.matches('^chars/[^/]+$')
                    && request.resource.data.status == 'ongoing';

    // 읽기: (원하면 공개로 바꿔도 됨)
      allow read: if request.auth != null && resource.data.owner_uid == request.auth.uid;

      // 진행 중 갱신(턴/스태미나/이벤트 누적 등): 소유자만
      allow update: if request.auth != null
                    && request.resource.data.owner_uid == request.auth.uid;
    
      // 삭제는 금지(원하면 && false 유지)
      allow delete: if false;
    }
  }



}
