// ToH Fangame — 최종 보안 규칙 (v3)
// writeBatch와 get()의 충돌을 해결하기 위해 explore_runs 생성 규칙을 재수정한 최종 버전입니다.
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== 공통 헬퍼 함수 =====
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(data) {
      return isSignedIn() && data.owner_uid == request.auth.uid;
    }
    // isCharPath와 charOwner는 이제 explore_runs 생성 규칙에서 사용되지 않습니다.
    function isCharPath(p) {
      return p is string && p.matches('^chars/[^/]+$');
    }
    function charOwner(charPath) {
      return get(/databases/$(database)/documents/$(charPath)).data.owner_uid;
    }

    // ===== 캐릭터 (chars) =====
    match /chars/{charId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.owner_uid == request.auth.uid;
      allow update: if isOwner(resource.data);
      allow delete: if isOwner(resource.data);

      match /images/{imageDoc} {
        allow read: if true;
        allow create, update, delete: if isSignedIn()
          && get(/databases/$(database)/documents/chars/$(charId)).data.owner_uid == request.auth.uid;
      }
    }
    
    // ===== 캐릭터 인벤토리 (char_items) =====
    match /char_items/{itemId} {
        allow read: if true;
        allow create: if isSignedIn()
            && isCharPath(request.resource.data.char_id)
            && charOwner(request.resource.data.char_id) == request.auth.uid;
        allow update, delete: if isSignedIn()
            && isCharPath(resource.data.char_id)
            && charOwner(resource.data.char_id) == request.auth.uid;
    }
    
    // ===== 탐험 (explore_runs) =====
    // ⚠️ 최종 수정: 생성 규칙에서 get() 호출(charOwner)을 완전히 제거했습니다.
    match /explore_runs/{runId} {
      allow read: if isOwner(resource.data);
      
      // 생성: 클라이언트가 보낸 owner_uid가 현재 로그인한 사용자의 uid와 일치하는지만 확인합니다.
      // 이것이 writeBatch와의 충돌을 피하는 가장 확실한 방법입니다.
      // explore.js에서 owner_uid를 u.uid로 설정했기 때문에 이 규칙은 안전합니다.
      allow create: if isSignedIn()
        && request.resource.data.owner_uid == request.auth.uid;
        
      allow update: if isOwner(resource.data)
        && !('owner_uid' in request.resource.data)
        && !('charRef' in request.resource.data);

      allow delete: if false;
    }

    // (이하 다른 규칙들은 이전과 동일합니다)
    // ===== 유저 프로필 (users) =====
    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && request.auth.uid == uid
        && (!('nickname' in request.resource.data) || request.resource.data.nickname.size() <= 20)
        && (
          !('nickname' in request.resource.data)
          || !('nickname' in resource.data)
          || request.resource.data.nickname == resource.data.nickname
          || !('lastNicknameChangeAt' in resource.data)
          || (request.time.toMillis() - resource.data.lastNicknameChangeAt > 7 * 24 * 60 * 60 * 1000)
        );
    }

    // ===== 친구 요청 (friendRequests) =====
    match /friendRequests/{reqId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.from;
      allow update: if isSignedIn() && request.auth.uid == resource.data.to;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }

    // ===== 친구 관계 (friendships) =====
    match /friendships/{pairId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.a || request.auth.uid == resource.data.b);
      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.a || request.auth.uid == request.resource.data.b);
    }
    
    // ===== 매칭 세션 (matchSessions) =====
    match /matchSessions/{sid} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.a_owner || request.auth.uid == resource.data.b_owner);
      allow write: if false;
    }
    
    // ===== 매칭 대기열 (matchRequests) =====
    match /matchRequests/{rid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn()
        && request.resource.data.owner_uid == request.auth.uid
        && request.resource.data.status == "open"
        && request.resource.data.lockedBy == null
        && request.resource.data.char_ref.matches('^chars/[^/]+$');
      allow update: if isSignedIn()
        && (
          ( resource.data.owner_uid == request.auth.uid
            && (request.resource.data.status in ["open","paired","cancelled"])
            && request.resource.data.lockedBy == resource.data.lockedBy
          ) || ( 
            resource.data.owner_uid != request.auth.uid
            && resource.data.lockedBy == null
            && request.resource.data.lockedBy != null
            && request.resource.data.status == resource.data.status
          )
        );
      allow delete: if isSignedIn()
        && (
          resource.data.owner_uid == request.auth.uid
          || (('expireAt' in resource.data) && resource.data.expireAt < request.time)
        );
    }

    // ===== 읽기 전용 컬렉션 =====
    match /rankings/{docId} {
      allow read: if true;
      allow write: if false;
    }
    match /configs/{docId}/{subpath=**} {
      allow read: if true;
      allow write: if false;
    }

    // ===== 기본 차단 규칙 =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

